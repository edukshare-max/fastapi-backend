"""
Script para crear el primer usuario admin: DireccionInnovaSalud
Usa el endpoint especial /auth/init-admin que no requiere autenticaci√≥n previa
"""
import requests
import json

# Configuraci√≥n
API_BASE_URL = "https://fastapi-backend-o7ks.onrender.com"
# Para desarrollo local: API_BASE_URL = "http://localhost:8000"

# Datos del usuario admin
admin_data = {
    "username": "DireccionInnovaSalud",
    "email": "innovasalud@uagro.mx",
    "nombre_completo": "Direcci√≥n Innova Salud",
    "rol": "admin",
    "campus": "llano-largo",
    "departamento": "Direcci√≥n",
    "password": "Uagro2025Admin"  # Simplificada sin caracteres especiales
}

print("=" * 70)
print("üè• CREAR PRIMER ADMIN: DireccionInnovaSalud")
print("=" * 70)
print()
print(f"üì° Backend: {API_BASE_URL}")
print()

# Verificar que el backend est√© disponible
print("üîç Verificando conexi√≥n con el backend...")
try:
    health_response = requests.get(f"{API_BASE_URL}/health", timeout=15)
    if health_response.status_code == 200:
        print("‚úÖ Backend disponible")
    else:
        print("‚ö†Ô∏è  Backend respondi√≥ con error")
except requests.exceptions.Timeout:
    print("‚è±Ô∏è  Backend tardando (cold start), esperando 30 segundos...")
    import time
    time.sleep(30)
except Exception as e:
    print(f"‚ùå Error de conexi√≥n: {e}")
    print("\n‚ö†Ô∏è  Aseg√∫rate que el backend est√© desplegado en Render.com")
    exit(1)

# Crear admin
print()
print("üîÑ Creando usuario administrador...")
print()

try:
    response = requests.post(
        f"{API_BASE_URL}/auth/init-admin",
        json=admin_data,
        headers={"Content-Type": "application/json"},
        timeout=30
    )
    
    if response.status_code == 200:
        user = response.json()
        print("=" * 70)
        print("‚úÖ USUARIO ADMINISTRADOR CREADO EXITOSAMENTE")
        print("=" * 70)
        print()
        print(f"ID:              {user['id']}")
        print(f"Usuario:         {user['username']}")
        print(f"Email:           {user['email']}")
        print(f"Nombre:          {user['nombre_completo']}")
        print(f"Rol:             {user['rol']}")
        print(f"Campus:          {user['campus']}")
        print(f"Departamento:    {user['departamento']}")
        print(f"Estado:          {'‚úì Activo' if user['activo'] else '‚úó Inactivo'}")
        print(f"Fecha creaci√≥n:  {user['fecha_creacion']}")
        print()
        print("=" * 70)
        print("üîê CREDENCIALES DE ACCESO AL PANEL WEB")
        print("=" * 70)
        print()
        print(f"üåê URL del panel:  {API_BASE_URL}/admin")
        print()
        print(f"   Usuario:        {admin_data['username']}")
        print(f"   Contrase√±a:     {admin_data['password']}")
        print(f"   Campus:         {admin_data['campus']}")
        print()
        print("=" * 70)
        print()
        print("üéØ PR√ìXIMOS PASOS:")
        print()
        print("1. Acceder al panel web: {}/admin".format(API_BASE_URL))
        print("2. Iniciar sesi√≥n con las credenciales de arriba")
        print("3. Crear usuarios adicionales desde el panel")
        print("4. (IMPORTANTE) Cambiar la contrase√±a del admin")
        print()
        print("‚ö†Ô∏è  NOTA: El endpoint /auth/init-admin se desactiv√≥ autom√°ticamente")
        print("   No se pueden crear m√°s admins por este m√©todo.")
        print()
        
    elif response.status_code == 403:
        error = response.json()
        print("=" * 70)
        print("‚ö†Ô∏è  EL SISTEMA YA TIENE UN ADMINISTRADOR")
        print("=" * 70)
        print()
        print(f"Detalle: {error.get('detail', 'Ya existe un admin')}")
        print()
        print("Para crear m√°s usuarios:")
        print("1. Inicia sesi√≥n como admin en: {}/admin".format(API_BASE_URL))
        print("2. Usa el bot√≥n 'Nuevo Usuario' desde el panel web")
        print()
        
    else:
        error = response.json()
        print("‚ùå ERROR AL CREAR USUARIO")
        print("=" * 70)
        print(f"Status: {response.status_code}")
        print(f"Detalle: {error.get('detail', 'Error desconocido')}")
        print()
        print("Posibles causas:")
        print("- La contrase√±a no cumple los requisitos (8+ caracteres)")
        print("- El username ya existe")
        print("- Problema de conexi√≥n a Cosmos DB")
        print()
        print("Respuesta completa:")
        print(json.dumps(error, indent=2))
        
except requests.exceptions.Timeout:
    print("‚ùå TIMEOUT")
    print()
    print("El servidor tard√≥ demasiado en responder.")
    print("Esto puede suceder si Render.com est√° en cold start.")
    print("Espera 1 minuto y vuelve a intentar.")
    
except Exception as e:
    print(f"‚ùå ERROR INESPERADO: {e}")
    print()
    print("Verifica:")
    print("1. Que el backend est√© corriendo en Render.com")
    print("2. Que Cosmos DB est√© disponible")
    print("3. Que las variables de entorno est√©n configuradas")

print()
print("=" * 70)
